import datetime

from OptionStrategyLib.OptionReplication.synthetic_option import SytheticOption
from PricingLibrary.Options import EuropeanOption
from back_test.model.base_account import BaseAccount
from back_test.model.constant import Util, OptionType, TradeType, LongShort
from back_test.model.trade import Trade
from data_access.get_data import get_dzqh_cf_daily, get_dzqh_cf_c1_daily, \
    get_dzqh_cf_c1_minute, get_index_mktdata

start_date = datetime.date(2017, 10, 15)
end_date = datetime.date(2017, 10, 20)

df_future_c1 = get_dzqh_cf_c1_minute(start_date, end_date, 'if')
df_future_c1_daily = get_dzqh_cf_c1_daily(start_date, end_date, 'if')
# daily data of all future contracts
df_future_daily = get_dzqh_cf_daily(start_date, end_date, 'if')
# daily data of underlying index
df_index = get_index_mktdata(start_date, end_date, 'index_300sh')
synthetic_option = SytheticOption(df_c1_minute=df_future_c1,
                                  df_c1_daily=df_future_c1_daily,
                                  df_futures_daily=df_future_daily,
                                  df_index_daily=df_index)
synthetic_option.init()
account = BaseAccount(Util.BILLION)
trading_desk = Trade()

#####################################################################
strike = synthetic_option.target_index_state[Util.AMT_CLOSE]
dt_maturity = synthetic_option.eval_date + datetime.timedelta(days=30)
vol = 0.2
Option = EuropeanOption(strike, dt_maturity, OptionType.PUT)
delta = synthetic_option.get_black_delta(Option, vol)
synthetic_unit = synthetic_option.get_synthetic_unit(delta)
if synthetic_unit > 0:
    trade_type = TradeType.OPEN_LONG
else:
    trade_type = TradeType.OPEN_SHORT
order = account.create_trade_order(synthetic_option,
                                   trade_type,
                                   synthetic_unit)
execution_record = synthetic_option.execute_order(order, slippage=0)
account.add_record(execution_record, synthetic_option)
# df = synthetic_option.get_c1_with_end_dates()
while synthetic_option.has_next():
    # TODO: 移仓换月时计成本，改account里的id_instruemnt
    delta = synthetic_option.get_black_delta(Option, vol)
    rebalance_unit = synthetic_option.get_sythetic_option_rebalancing_unit(delta)
    if rebalance_unit > 0:
        long_short = LongShort.LONG
    else:
        long_short = LongShort.SHORT
    trade_type = account.get_trade_type(synthetic_option.id_instrument(), rebalance_unit, long_short)
    order = account.create_trade_order(synthetic_option,
                                       trade_type,
                                       rebalance_unit)
    print()
